C = postData[,3,j.iter]
delta2 = postData[,6,j.iter]
R = postData[,1,j.iter]
D = postData[,2,j.iter]
fit.trt = survfit(Surv(C[1:n.current.trt], 1-delta2[1:n.current.trt]) ~ 1)
fit.ctrl = survfit(Surv(C[(n.current.trt+1):(n_current-1)],
1-delta2[(n.current.trt+1):(n_current-1)]) ~ 1)
time.trt[[j.iter]] = summary(fit.trt)$time
time.ctrl[[j.iter]] = summary(fit.ctrl)$time
surv.trt[[j.iter]] = summary(fit.trt)$surv
surv.ctrl[[j.iter]] = summary(fit.ctrl)$surv
}
## getting the survival probability for event times, from the censoring distribution from both groups
## calculate WR
result = mywinratio:: compare(M_iter = M_iter, n_current_ctrl = n.current.ctrl,
n_current_trt = n.current.trt, postData = postData,
time_trt = time.trt, time_ctrl = time.ctrl, surv_trt = surv.trt, surv_ctrl = surv.ctrl)
probs = mean(result$WR > eta, na.rm  = T)
cutoff = ((n.current.trt + n.current.ctrl)/N.max)**lambda
return(list(probs = probs, cutoff = cutoff))
}
while (n.current < N.max &&  trial.stop !=1)
{
j.cohort<-j.cohort+1;
n.current<- cohort[j.cohort];
Time.entry <- recruit.int*(c(1:n.current)-1)        ; ## take into account recruit interver;
Time.current <- recruit.int*(n.current-1)  ;
currentData =  myData[1:n.current-1,,i.sim]
result = winratio(currentdd = currentData,
n_current = n.current,
Time_current = Time.current,
Time_entry = Time.entry,
m0 = m0,
k0 = k0,
v0 = v0,
S0 = S0,
time_max = time_max,
M_iter = M_iter,
eta = eta,
lambda = lambda,
N.max = N.max)
if (result$probs <= result$cutoff) { trial.stop<-1; trialER.stop <-1 }
}
pts.stop<-n.current;
if (pts.stop==N.max) {trialER.stop<-0}
### early stop for the last cohort; trial.stop =1, while not early stoped.
stop.all[i.sim]<-trial.stop;
stop.early[i.sim] <-trialER.stop;
pts.all[i.sim] <-pts.stop;
}
MyRaw <- data.frame(PRN=1-stop.all, PEN=stop.early, EN=pts.all);
mysim1<-(apply(MyRaw,2,mean));
mysim1<- round(mysim1,3);
return(list(mysim1 = mysim1, mu = c(mu.trt,mu.ctrl), Sigma.trt = Sigma.trt, Sigma.ctrl = Sigma.ctrl,
lambda = lambda))
}
OCC.Table(N.sim = 2,
N.max = 100,
mu.trt = c(log(2), log(5)),
Sigma.trt = matrix(c(1, 0.5, 0.5, 1), ncol=2),
mu.ctrl= c(log(2), log(5)),
Sigma.ctrl = matrix(c(1, 0.5, 0.5, 1), ncol=2),
cens_upper = 20,
cohort = c(40,60,80,100),
recruit.int  = 0.25,
m0 = c(0,0),
k0 = 0.001,
v0 = 4,
S0 = diag(0.001, 2),
time_max = 20,
M_iter = 10,
eta = 1,
lambda = 0.25
)
getwd()
result <- readRDS("C:/Users/huang/OneDrive - The University of Texas Health Science Center at Houston/dissertation/code/win ratio/result/0912_sim1/result_forthetuned_lambda.rds")
result
result_test1 <- readRDS("C:/Users/huang/OneDrive - The University of Texas Health Science Center at Houston/dissertation/code/win ratio/result/0912_sim1/result_test1.rds")
View(result_test1)
result_test1
result_test <- readRDS("C:/Users/huang/OneDrive - The University of Texas Health Science Center at Houston/dissertation/code/win ratio/result/0912_sim1/result_test.rds")
result_test
library(test)
?glm
?quantile
vignette("rd")
library(remotes)
library(devtools)
library(roxygen2)
RcppArmadillo::RcppArmadillo.package.skeleton("test2", example_code = F)
remove.packages("Rcpp")
library(remotes)
library(devtools)
library(roxygen2)
RcppArmadillo::RcppArmadillo.package.skeleton("test11", example_code = F)
library(remotes)
library(devtools)
library(roxygen2)
RcppArmadillo::RcppArmadillo.package.skeleton("test12", example_code = F)
burn_MCMC = as.integer(0.3*100000)
idxs <- seq(burn_MCMC, Niter, by = 5)
burn_MCMC = as.integer(0.3*100000)
idxs <- seq(burn_MCMC, 100000, by = 5)
M_iter = length(idxs)
burn_MCMC = as.integer(0.3*50000)
idxs <- seq(burn_MCMC, 50000, by = 5)
M_iter = length(idxs)
burn_MCMC = as.integer(0.3*100000)
idxs <- seq(burn_MCMC, 100000, by = 5)
M_iter = length(idxs)
length(c(600,900,1200))
1/0.07
0.01*1000
(900/1262)^26
(900/1262)^27
1/7000
1/15000
library(remotes)
library(devtools)
library(roxygen2)
RcppArmadillo::RcppArmadillo.package.skeleton("BayesianWinRatio", example_code = F)
library(remotes)
library(devtools)
library(roxygen2)
## copy .cpp to /scr folder.
## add RcppDist to LinkTo in the description file
## add R functions to /R folder.
setwd("BayesianWinRatio")
Rcpp::compileAttributes()
# add documentation for package itself
usethis::use_package_doc() # do not need to modify. running roxygen2::roxygenize(roclets="rd") will update .rd
roxygen2::roxygenize(roclets="rd") # this updates the documentation; use this when also compile Rcpp.
devtools::document()  # Rebuild the NAMESPACE file
devtools::build_readme()
check()
devtools::install_github("xinran-h/BayesianWinRatio")
Sys.setenv(GITHUB_PAT = "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")
devtools::install_github("xinran-h/BayesianWinRatio")
library(BayesianWinRatio)
test
attach(test)
BayesianWinRatio::test
demo = BayesianWinRatio::test
devtools::build_readme()
dd = BayesianWinRatio::test
library(MASS)
library(survival)
library(parallel)
data = data.simulation(N.sim = 1000, N.max = 20,
mu.trt = c(0.2,0.3), Sigma.trt = matrix(c(1,0.5,0.5,1), nrow = 2, byrow = T),
mu.ctrl = c(0.2,0.3),Sigma.ctrl = matrix(c(1,0.5,0.5,1), nrow = 2, byrow = T),
cens_upper = 40)
Cutoff2Prob <- 0.1 # PET = 0.1 under the null scenario
# Define the bisection parameters
a <- 0  # The lowest value of mylambda, update based on the simulation results.
b <- 30 # The highest value of mylambda, update based on the simulation results.
tolerance <- 0.01   # Tolerance for stopping the bisection
N.sim = 1
sim_results <- parallel::mclapply(1:N.sim, function(x){OCC.Table(
myData = data[,,x],
N.max = 20,
design = 1,
cohort = c(5, 10, 15),
recruit.int  = 0.25,
m0 = c(0,0),
L0 = diag(10^6, 2),
v0 = 4,
S0 = diag(10^(-6), 2),
time_max = 100,
eta = 1.5,
lambda = c,
thin_MCMC = 5,Niter = 10)}, mc.cores = 1)
devtools::document()  # Rebuild the NAMESPACE file
# add documentation for package itself
usethis::use_package_doc() # do not need to modify. running roxygen2::roxygenize(roclets="rd") will update .rd
roxygen2::roxygenize(roclets="rd") # this updates the documentation; use this when also compile Rcpp.
# add documentation for package itself
usethis::use_package_doc() # do not need to modify. running roxygen2::roxygenize(roclets="rd") will update .rd
roxygen2::roxygenize(roclets="rd") # this updates the documentation; use this when also compile Rcpp.
devtools::document()  # Rebuild the NAMESPACE file
Rcpp::compileAttributes()
# add documentation for package itself
usethis::use_package_doc() # do not need to modify. running roxygen2::roxygenize(roclets="rd") will update .rd
roxygen2::roxygenize(roclets="rd") # this updates the documentation; use this when also compile Rcpp.
devtools::document()  # Rebuild the NAMESPACE file
check() # check the package
# add documentation for package itself
usethis::use_package_doc() # do not need to modify. running roxygen2::roxygenize(roclets="rd") will update .rd
roxygen2::roxygenize(roclets="rd") # this updates the documentation; use this when also compile Rcpp.
devtools::document()  # Rebuild the NAMESPACE file
# add documentation for package itself
usethis::use_package_doc() # do not need to modify. running roxygen2::roxygenize(roclets="rd") will update .rd
roxygen2::roxygenize(roclets="rd") # this updates the documentation; use this when also compile Rcpp.
devtools::document()  # Rebuild the NAMESPACE file
# add documentation for package itself
usethis::use_package_doc() # do not need to modify. running roxygen2::roxygenize(roclets="rd") will update .rd
roxygen2::roxygenize(roclets="rd") # this updates the documentation; use this when also compile Rcpp.
devtools::document()  # Rebuild the NAMESPACE file
check() # check the package
#usethis::use_package("parallel")
usethis::use_package("Rcpp")
check() # check the package
devtools::install_github("xinran-h/BayesianWinRatio")
devtools::build_readme()
Sys.setenv(GITHUB_PAT = "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")
devtools::install_github("xinran-h/BayesianWinRatio")
library(BayesianWinRatio)
dd = BayesianWinRatio::test
library(MASS)
library(survival)
library(parallel)
data = data.simulation(N.sim = 1000, N.max = 20,
mu.trt = c(0.2,0.3), Sigma.trt = matrix(c(1,0.5,0.5,1), nrow = 2, byrow = T),
mu.ctrl = c(0.2,0.3),Sigma.ctrl = matrix(c(1,0.5,0.5,1), nrow = 2, byrow = T),
cens_upper = 40)
Cutoff2Prob <- 0.1 # PET = 0.1 under the null scenario
sim_results <- parallel::mclapply(1:2, function(x){OCC.Table(
myData = data[,,x],
N.max = 20,
design = 1,
cohort = c(5),
recruit.int  = 0.25,
m0 = c(0,0),
L0 = diag(10^6, 2),
v0 = 4,
S0 = diag(10^(-6), 2),
time_max = 100,
eta = 1.5,
lambda = c,
thin_MCMC = 5,Niter = 10)}, mc.cores = 1)
data[,,1]
test  = data[,,1]
View(test)
str(test)
is.matrix(test)
data = data.simulation(N.sim = 1000, N.max = 20,
mu.trt = c(log(2), log(5)), Sigma.trt = matrix(c(1,0.5,0.5,1), nrow = 2, byrow = T),
mu.ctrl = c(log(2), log(5)),Sigma.ctrl = matrix(c(1,0.5,0.5,1), nrow = 2, byrow = T),
cens_upper = 25)
sim_results <- parallel::mclapply(1:2, function(x){OCC.Table(
myData = data[,,x],
N.max = 20,
design = 1,
cohort = c(5),
recruit.int  = 0.25,
m0 = c(0,0),
L0 = diag(10^6, 2),
v0 = 4,
S0 = diag(10^(-6), 2),
time_max = 100,
eta = 1.5,
lambda = 16,
thin_MCMC = 5,Niter = 10)}, mc.cores = 1)
OCC.Table(
myData = data[,,1],
N.max = 20,
design = 1,
cohort = c(5, 10, 15),
recruit.int  = 0.25,
m0 = c(0,0),
L0 = diag(10^6, 2),
v0 = 4,
S0 = diag(10^(-6), 2),
time_max = 100,
eta = 1.5,
lambda = c,
thin_MCMC = 5,Niter = 10)}
OCC.Table(
myData = data[,,1],
N.max = 20,
design = 1,
cohort = c(5, 10, 15),
recruit.int  = 0.25,
m0 = c(0,0),
L0 = diag(10^6, 2),
v0 = 4,
S0 = diag(10^(-6), 2),
time_max = 100,
eta = 1.5,
lambda = c,
thin_MCMC = 5,Niter = 10)
myData = data[,,1]
data = data.simulation(N.sim = 1000, N.max = 20,
mu.trt = c(log(2), log(5)), Sigma.trt = matrix(c(1,0.5,0.5,1), nrow = 2, byrow = T),
mu.ctrl = c(log(2), log(5)),Sigma.ctrl = matrix(c(1,0.5,0.5,1), nrow = 2, byrow = T),
cens_upper = 25)
OCC.Table(
myData = data[,,1],
N.max = 20,
design = 1,
cohort = c(5, 10, 15),
recruit.int  = 0.25,
m0 = c(0,0),
L0 = diag(10^6, 2),
v0 = 4,
S0 = diag(10^(-6), 2),
time_max = 100,
eta = 1.5,
lambda = c,
thin_MCMC = 5,Niter = 10)
OCC.Table(
myData = data[,,1],
N.max = 100,
design = 1,
cohort = c(40,60,80),
recruit.int  = 0.25,
m0 = c(0,0),
L0 = diag(10^6, 2),
v0 = 4,
S0 = diag(10^(-6), 2),
time_max = 100,
eta = 1.5,
lambda = 16,
thin_MCMC = 5,Niter = 10)
OCC.Table(
myData = data[,,1],
N.max = 100,
design = 1,
cohort = c(40,60,80),
recruit.int  = 0.25,
m0 = c(0,0),
L0 = diag(10^6, 2),
v0 = 4,
S0 = diag(10^(-6), 2),
time_max = 100,
eta = 1.5,
lambda = 16,
thin_MCMC = 5,Niter = 10)
data = data.simulation(N.sim = 1000, N.max = 100,
mu.trt = c(log(2), log(5)), Sigma.trt = matrix(c(1,0.5,0.5,1), nrow = 2, byrow = T),
mu.ctrl = c(log(2), log(5)),Sigma.ctrl = matrix(c(1,0.5,0.5,1), nrow = 2, byrow = T),
cens_upper = 25)
OCC.Table(
myData = data[,,1],
N.max = 100,
design = 1,
cohort = c(40,60,80),
recruit.int  = 0.25,
m0 = c(0,0),
L0 = diag(10^6, 2),
v0 = 4,
S0 = diag(10^(-6), 2),
time_max = 100,
eta = 1.5,
lambda = 16,
thin_MCMC = 5,Niter = 10)
OCC.Table(
myData = data[,,1],
N.max = 100,
design = 1,
cohort =c(5, 10, 15),
recruit.int  = 0.25,
m0 = c(0,0),
L0 = diag(10^6, 2),
v0 = 4,
S0 = diag(10^(-6), 2),
time_max = 100,
eta = 1.5,
lambda = 16,
thin_MCMC = 5,Niter = 10)
View(dd)
View(test)
OCC.Table(
myData = data[,,1],
N.max = 100,
design = 1,
cohort =c(10, 15),
recruit.int  = 0.25,
m0 = c(0,0),
L0 = diag(10^6, 2),
v0 = 4,
S0 = diag(10^(-6), 2),
time_max = 100,
eta = 1.5,
lambda = 16,
thin_MCMC = 5,Niter = 10)
test = data.simulation(N.sim = 1, N.max = 100,
mu.trt = c(log(2), log(5)), Sigma.trt = matrix(c(1,0.5,0.5,1), nrow = 2, byrow = T),
mu.ctrl = c(log(1), log(3)),Sigma.ctrl = matrix(c(1,0.5,0.5,1), nrow = 2, byrow = T),
cens_upper = 25)
head(test)
myData <- readRDS("C:/Users/huang/OneDrive - UTHealth Houston/dissertation/projects/proj1_winratio/real data/myData.rds")
test = myData[sample(1:1000,100, replace = F),]
View(test)
row.names(test) = NULL
test$id = 1:100
View(test)
test[,3:5] = test[,3:5]/12
View(test)
test2= data.simulation(N.sim = 1000, N.max = 100,
mu.trt = c(0.88, 2), Sigma.trt = matrix(c(1,0.5,0.5,1), nrow = 2, byrow = T),
mu.ctrl = c(log(2), log(5)),Sigma.ctrl = matrix(c(1,0.5,0.5,1), nrow = 2, byrow = T),
cens_upper = 25)
test2= data.simulation(N.sim = 1, N.max = 100,
mu.trt = c(0.88, 2), Sigma.trt = matrix(c(1,0.5,0.5,1), nrow = 2, byrow = T),
mu.ctrl = c(log(2), log(5)),Sigma.ctrl = matrix(c(1,0.5,0.5,1), nrow = 2, byrow = T),
cens_upper = 25)
test2_1 = test2[,,1]
test2_2 = data.frame(id = test2_1[,5], arm = test2_1[,4], recurrence = test2_1[,1], death = test2_1[,2], censor = test2_1[,3])
View(test2_2)
test2_2$arm = 3-test2_2$arm
View(test2_2)
View(test2_1)
test2_2 = data.frame(id = test2_1[,5], arm = test2_1[,4], recurrence = test2_1[,1], death = test2_1[,2], censor = test2_1[,3])
test2_2$arm = 2+test2_2$arm
save(test2_2, file = "data/test.rda")
str(test2_2)
data = data.simulation(N.sim = 1000, N.max = 100,
mu.trt = c(log(2), log(5)), Sigma.trt = matrix(c(1,0.5,0.5,1), nrow = 2, byrow = T),
mu.ctrl = c(log(2), log(5)),Sigma.ctrl = matrix(c(1,0.5,0.5,1), nrow = 2, byrow = T),
cens_upper = 25)
parallel::mclapply(1:N.sim, function(x){OCC.Table(
myData = data[,,x],
N.max = 100,
design = 1,
cohort = c(40, 60, 80),
recruit.int  = 0.25,
m0 = c(0,0),
L0 = diag(10^6, 2),
v0 = 4,
S0 = diag(10^(-6), 2),
time_max = 100,
eta = 1.5,
lambda = 16,
thin_MCMC = 5,Niter = 10)
}
parallel::mclapply(1:1, function(x){OCC.Table(
myData = data[,,x],
N.max = 100,
design = 1,
cohort = c(40, 60, 80),
recruit.int  = 0.25,
m0 = c(0,0),
L0 = diag(10^6, 2),
v0 = 4,
S0 = diag(10^(-6), 2),
time_max = 100,
eta = 1.5,
lambda = 16,
thin_MCMC = 5,Niter = 10)}, mc.cores = 1)
sim_results = parallel::mclapply(1:1, function(x){OCC.Table(
myData = data[,,x],
N.max = 100,
design = 1,
cohort = c(40, 60, 80),
recruit.int  = 0.25,
m0 = c(0,0),
L0 = diag(10^6, 2),
v0 = 4,
S0 = diag(10^(-6), 2),
time_max = 100,
eta = 1.5,
lambda = 16,
thin_MCMC = 5,Niter = 10)}, mc.cores = 1)
stop.all <- sapply(sim_results, function(res) res$trial.stop)
stop.early <- sapply(sim_results, function(res) res$trialER.stop)
pts.all <- sapply(sim_results, function(res) res$pts.stop)
MyRaw <- data.frame(PRN=1-stop.all, PEN=stop.early, EN=pts.all);
mysim1<-(apply(MyRaw,2,mean));
rm(MyRaw, sim_results, stop.all, stop.early, pts.all)
gc()
mysim1
dd = test2_2
dd$arm = as.numeric(dd$arm == 2)
## recode unobserved event time with a very large value, say 99999
dd$recurrence[is.na(dd$recurrence)] = 99999
dd$death[is.na(dd$death)] = 99999
myData = matrix(NA, nrow = nrow(dd), ncol = 7)
myData[,1:5] = as.matrix(dd[, c(3:5,2,1)])
colnames(myData) = c("recurrence_t", "death_t", "censor_t",   "group", "id", "delta1", "delta2")
OCC.Table(
myData = myData,
N.max = 40,
design = 1,
cohort = c(5),
recruit.int  = 0.25,
m0 = c(0,0),
L0 = diag(10^6, 2),
v0 = 4,
S0 = diag(10^(-6), 2),
time_max = 100,
eta = 1.5,
lambda = 10, # using the lambda calibrated above
thin_MCMC = 5,Niter = 10)
# add documentation for package itself
usethis::use_package_doc() # do not need to modify. running roxygen2::roxygenize(roclets="rd") will update .rd
roxygen2::roxygenize(roclets="rd") # this updates the documentation; use this when also compile Rcpp.
usethis::use_data(test2_2,overwrite = TRUE)
test = test2_2
# add a test data
usethis::use_data(test,overwrite = TRUE)
load("C:/Users/huang/OneDrive - UTHealth Houston/dissertation/mypackages/BayesianWinRatio/data/test.rda")
View(test)
# add documentation for package itself
usethis::use_package_doc() # do not need to modify. running roxygen2::roxygenize(roclets="rd") will update .rd
roxygen2::roxygenize(roclets="rd") # this updates the documentation; use this when also compile Rcpp.
devtools::document()  # Rebuild the NAMESPACE file
devtools::build_readme()
check()
library(remotes)
library(devtools)
library(roxygen2)
check() # check the package
devtools::build_readme()
Sys.setenv(GITHUB_PAT = "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")
devtools::install_github("xinran-h/BayesianWinRatio")
unloadNamespace(‘BayesianWinRatio’)
unloadNamespace(BayesianWinRatio)
unloadNamespace("BayesianWinRatio")
devtools::install_github("xinran-h/BayesianWinRatio")
Sys.setenv(GITHUB_PAT = "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")
devtools::install_github("xinran-h/BayesianWinRatio")
